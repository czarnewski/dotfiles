" Vim Run Commands file
" Author: Paulo Czarnewski
" Special: Erik Fasterius



"Set Leaders:
let maplocalleader = ','
let mapleader = " "


set guioptions-=e
set laststatus=2
filetype indent on
set foldcolumn=2

" Plugins: {{{1

source ~/.dotfiles/vim/plugins/vimplug.vim

call plug#begin('~/.vim/plugged')
source ~/.dotfiles/vim/plugins/coc.vim
source ~/.dotfiles/vim/plugins/nerdtree.vim
source ~/.dotfiles/vim/plugins/fzf.vim
source ~/.dotfiles/vim/plugins/git.vim
source ~/.dotfiles/vim/plugins/lightline.vim

" source ~/.dotfiles/vim/plugins/color_scheme.vim
source ~/.dotfiles/vim/plugins/code_folding.vim
" source ~/.dotfiles/vim/plugins/git.vim
" source ~/.dotfiles/vim/plugins/git.vim
" source ~/.dotfiles/vim/plugins/git.vim

Plug 'prabirshrestha/vim-lsp'
Plug 'rakr/vim-one'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'jalvesaq/Nvim-R'
Plug 'farmergreg/vim-lastplace'  " Opens vim where you left off
Plug 'tpope/vim-projectionist'
Plug 'Yggdroot/indentLine'
Plug 'airblade/vim-rooter'
Plug 'vimwiki/vimwiki'
Plug 'jremmen/vim-ripgrep'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'jiangmiao/auto-pairs'
Plug 'bagrat/vim-buffet'
Plug 'ap/vim-css-color'
" Plug 'ncm2/ncm2'
" Plug 'roxma/nvim-yarp'
" Plug 'roxma/vim-hug-neovim-rpc'
" Plug 'ncm2/ncm2-bufword'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'vim-pandoc/vim-pandoc'
" Plug 'vim-pandoc/vim-pandoc-syntax'
" Plug 'vim-pandoc/vim-rmarkdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
Plug 'chrisbra/Colorizer'

Plug 'Konfekt/FastFold'
Plug 'tmhedberg/SimpylFold'
Plug 'preservim/nerdcommenter'
call plug#end()







" Color Scheme: {{{1

colorscheme one
set background=light
set splitright
set clipboard=unnamed
set guicursor=
set showcmd

" NCM2
" autocmd BufEnter * call ncm2#enable_for_buffer()    " To enable ncm2 for all buffers.
" set completeopt=noinsert,menuone,noselect           " :help Ncm2PopupOpen for more
"                                                    " information.


" General Key Mappings: {{{1


" Line numbers
set number
set relativenumber
set noerrorbells                " No annoying sound on errors.
" TAB settings: {{{1

set mouse=a
set hlsearch
set tabstop=2    " <TAB> is 2 spaces wide
set smarttab     " To use smart tabs.
set autoindent   " To copy indentation from current line
set expandtab    " <TAB is expanded to spaces
set shiftwidth=2 " Use 2 spaces when indenting with '>'
set foldmethod=marker
" setlocal foldmethod=syntax

" Files & Backup {{{1
set nobackup                     " Turn off backup.
set nowb                         " Don't backup before overwriting a file.
set noswapfile                   " Don't create a swap file.
set ffs=unix,dos,mac             " Use Unix as the standard file type.
set encoding=utf-8
set backspace=indent,eol,start

" Styling configurations: {{{1
set colorcolumn=81,161
highlight ColorColumn ctermbg=grey
" autocmd FileType markdown set conceallevel=0
" autocmd FileType rmarkdown set conceallevel=0
" set conceallevel=0
" autocmd FileType rmarkdown set concealddlevel=0
let g:vim_markdown_conceal = 0
set spell spelllang=en_us
setlocal spell spelllang=en_us

let g:pandoc#syntax#conceal#use = 0
let g:pandoc#syntax#codeblocks#embeds#langs = ['r']
let g:vim_r_syntax_conceal = 0
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
set conceallevel=0

au FileType rmarkdown setlocal conceallevel=0
au FileType rmd setlocal conceallevel=0


" General Key Mappings: {{{1



filetype plugin on
" Create default mappings
let g:NERDCreateDefaultMappings = 1
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

let g:NERDCustomDelimiters = { 'r': { 'left': '#','right': '' } }

set updatetime=300 " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable

nnoremap <tab> <c-x><c-o>
" inoremap <silent><expr> <c-space> coc#refresh()
" inoremap <TAB> <c-x><c-o>

let R_rconsole_height = winheight(0) / 3
autocmd VimResized * let R_rconsole_height = winheight(0) / 3
let R_rconsole_width = 0




set nocompatible
filetype plugin on
syntax on
let g:vimwiki_list = [{
  \ 'path'   : '~/.dotfiles/vim/vimwiki',
  \ 'syntax' : 'markdown',
  \ 'ext'    : '.md'}]


" Pandoc Config: {{{1
let g:pandoc#folding#fold_fenced_codeblocks = 1  " Fold R code chunks
let g:pandoc#folding#fold_yaml = 1  " Fold the YAML header


" Markdown codeblock: {{{1
" hi markdownCodeBlockBG ctermbg=254
" sign define codeblock linehl=markdownCodeBlockBG

" function! MarkdownBlocks()
"     let l:continue = 0
"     execute "sign unplace * file=".expand("%")

"     " iterate through each line in the buffer
"     for l:lnum in range(1, len(getline(1, "$")))
"         " detect the start fo a code block
"         if getline(l:lnum) =~ "^```.*$" || l:continue
"             " continue placing signs, until the block stops
"             let l:continue = 1
"             " place sign
"             execute "sign place ".l:lnum." line=".l:lnum." name=codeblock file=".expand("%")
"             " stop placing signs
"             if getline(l:lnum) =~ "^```$"
"                 let l:continue = 0
"             endif
"         endif
"     endfor
" endfunction





au FileType markdown syn region myMkdHeaderFold
        \ start="\v^\s*\z(\#{1,6})"
        \ skip="\v(\n\s*\z1\#)\@="
        \ end="\v\n(\s*\#)\@="ms=s-1,me=s-1
        \ fold contains=myMkdHeaderFold

au FileType markdown syn sync fromstart
au FileType markdown set foldmethod=syntax




" Use signs to highlight code blocks
" Set signs on loading the file, leaving insert mode, and after writing it
" au InsertLeave *.rmd call MarkdownBlocks()
" au BufEnter *.rmd call MarkdownBlocks()
" au BufWritePost *.rmd call MarkdownBlocks()
let g:R_assign = 0
" settings :: Nvim-R plugin
" R output is highlighted with current colorschemelet 
let g:rout_follow_colorscheme = 1
" R commands in R output are highlightedlet 
let g:Rout_more_colors = 1


set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}






nmap <leader>vp :tabnew ~/.dotfiles/vim/vimrc<cr>
nmap <leader>svp :source ~/.dotfiles/vim/vimrc<cr>
nmap gf :tabnew <cfile><cr>
" nmap gr :tabnew <cfile><cr>
nmap gF :e#<cr>

" These lines offer support to autocompletion on the VIM's buffer line
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum

command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')


" .............................................................................
" iamcco/markdown-preview.nvim
" .............................................................................

let g:mkdp_auto_close=0
let g:mkdp_refresh_slow=1
" let g:mkdp_markdown_css=fnameescape($HOME).'/.local/lib/github-markdown-css/github-markdown.css'



